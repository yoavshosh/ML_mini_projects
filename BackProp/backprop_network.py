"""Yoav Shoshanbackprop_network.py"""import randomimport numpy as npimport matplotlib.pyplot as pltclass Network(object):    def __init__(self, sizes):        """The list ``sizes`` contains the number of neurons in the        respective layers of the network.  For example, if the list        was [2, 3, 1] then it would be a three-layer network, with the        first layer containing 2 neurons, the second layer 3 neurons,        and the third layer 1 neuron.  The biases and weights for the        network are initialized randomly, using a Gaussian        distribution with mean 0, and variance 1.  Note that the first        layer is assumed to be an input layer, and by convention we        won't set any biases for those neurons, since biases are only        ever used in computing the outputs from later layers."""        self.num_layers = len(sizes)        self.sizes = sizes        self.biases = [np.random.randn(y, 1) for y in sizes[1:]]        self.weights = [np.random.randn(y, x) for x, y in zip(sizes[:-1], sizes[1:])]        self.training_acc = []        self.training_loss = []        self.test_acc = []        self.epochs = []        self.grad_nabla_b_list = [[] for x in range(self.num_layers-1)]        self.training_size = 0.0    def SGD(self, training_data, epochs, mini_batch_size, learning_rate, test_data, save_acc_each_step = False):        """Train the neural network using mini-batch stochastic        gradient descent.  The ``training_data`` is a list of tuples        ``(x, y)`` representing the training inputs and the desired        outputs.  """        print("\nInitial test accuracy: {0}".format(self.one_label_accuracy(test_data)))        n = len(training_data)        self.training_size = float(n)        for j in range(epochs):            self.epochs.append(j)            random.shuffle(list(training_data))            mini_batches = [training_data[k:k+mini_batch_size] for k in range(0, n, mini_batch_size)]            for mini_batch in mini_batches:                self.update_mini_batch(mini_batch, learning_rate)            if save_acc_each_step:                self.training_acc.append(self.one_hot_accuracy(training_data))                self.training_loss.append(self.loss(training_data))                self.test_acc.append(self.one_label_accuracy(test_data))                print ("Epoch {0} training accuracy: {1}".format(j, round(self.training_acc[-1],3)))                print ("Epoch {0} training loss: {1}".format(j, round(self.training_loss[-1],3)))                print ("Epoch {0} test accuracy: {1}".format(j, round(self.test_acc[-1],3)))            else:                self.test_acc.append(self.one_label_accuracy(test_data))                print ("Epoch {0} test accuracy: {1}".format(j, self.one_label_accuracy(test_data)))    def update_mini_batch(self, mini_batch, learning_rate):        """Update the network's weights and biases by applying        stochastic gradient descent using backpropagation to a single mini batch.        The ``mini_batch`` is a list of tuples ``(x, y)``."""        nabla_b = [np.zeros(b.shape) for b in self.biases]        nabla_w = [np.zeros(w.shape) for w in self.weights]        for x, y in mini_batch:            delta_nabla_b, delta_nabla_w = self.backprop(x, y)            nabla_b = [nb+dnb for nb, dnb in zip(nabla_b, delta_nabla_b)]            nabla_w = [nw+dnw for nw, dnw in zip(nabla_w, delta_nabla_w)]        self.weights = [w - (learning_rate / len(mini_batch)) * nw for w, nw in zip(self.weights, nabla_w)]        self.biases = [b - (learning_rate / len(mini_batch)) * nb for b, nb in zip(self.biases, nabla_b)]        self.update_nabla_b_norms(nabla_b)            def update_nabla_b_norms(self, nabla_b):        for i in range(len(self.grad_nabla_b_list)):            self.grad_nabla_b_list[i].append(np.linalg.norm(nabla_b[i])/self.training_size)    def backprop(self, x, y):        """The function receives as input a 784 dimensional         vector x and a one-hot vector y.        The function should return a tuple of two lists (db, dw)         as described in the assignment pdf. """                db = [np.zeros(b.shape) for b in self.biases]        dw = [np.zeros(w.shape) for w in self.weights]        a = [x] #this is z_0        z_list = []                #Feed forward        for w,b in zip(self.weights,self.biases):            next_z = np.dot(w,a[-1]) + b            z_list.append(next_z)            a.append(sigmoid(next_z))                    # backward prop, last elements (derivative withe repect to last L)        delta = self.loss_derivative_wr_output_activations(z_list[-1],y)        dw[-1] = np.dot(delta, a[-2].transpose())        db[-1] = delta        #back prop - remaning elements from L-1 to the first layer        for l in range(2,self.num_layers):             delta = np.dot(self.weights[-l+1].transpose(), delta) * sigmoid_derivative(z_list[-l])            dw[-l] = np.dot(delta, a[-l-1].transpose())            db[-l] = delta                return (db, dw)    def one_label_accuracy(self, data):        """Return accuracy of network on data with numeric labels"""        output_results = [(np.argmax(self.network_output_before_softmax(x)), y) for (x, y) in data]        return sum(int(x == y) for (x, y) in output_results)/float(len(data))    def one_hot_accuracy(self,data):        """Return accuracy of network on data with one-hot labels"""        output_results = [(np.argmax(self.network_output_before_softmax(x)), np.argmax(y)) for (x, y) in data]        return sum(int(x == y) for (x, y) in output_results) / float(len(data))    def network_output_before_softmax(self, x):        """Return the output of the network before softmax if ``x`` is input."""        layer = 0        for b, w in zip(self.biases, self.weights):            if layer == len(self.weights) - 1:                x = np.dot(w, x) + b            else:                x = sigmoid(np.dot(w, x)+b)            layer += 1        return x    def loss(self, data):        """Return the loss of the network on the data"""        loss_list = []        for (x, y) in data:            net_output_before_softmax = self.network_output_before_softmax(x)            net_output_after_softmax = self.output_softmax(net_output_before_softmax)            loss_list.append(np.dot(-np.log(net_output_after_softmax).transpose(),y).flatten()[0])        return sum(loss_list) / float(len(data))    def output_softmax(self, output_activations):        """Return output after softmax given output before softmax"""        output_exp = np.exp(output_activations)        return output_exp/output_exp.sum()    def loss_derivative_wr_output_activations(self, output_activations, y):        """Return derivative of loss with respect to the output activations before softmax"""        return self.output_softmax(output_activations) - y    def plot_acc_wrt_epochs(self):        plt.plot(self.epochs,self.test_acc)        plt.xlabel('Epochs')        plt.ylabel('Test accuracy')        plt.savefig('Test_accuracy_wrt_epoches.png')        plt.close()        plt.plot(self.epochs,self.training_acc)        plt.xlabel('Epochs')        plt.ylabel('Training accuracy')        plt.savefig('train_accuracy_wrt_epoches.png')        plt.close()        plt.plot(self.epochs,self.training_loss)        plt.xlabel('Epochs')        plt.ylabel('Training loss')        plt.savefig('train_loss_wrt_epoches.png')        plt.close()            def plot_db_norm_wrt_epochs(self):        for i in range(len(self.grad_nabla_b_list)):            plt.plot(self.epochs, self.grad_nabla_b_list[i], label = "Layer"+str(i))        plt.xlabel('Epochs')        plt.ylabel('Nabla Bias Norm')        plt.title('Norm(nabla*bias) wrt epochs')        plt.legend(loc = 'best')        plt.savefig('nabla_bias_grad_wrt_epochs.png')        plt.close()def sigmoid(z):    """The sigmoid function."""    return 1.0/(1.0+np.exp(-z))def sigmoid_derivative(z):    """Derivative of the sigmoid function."""    return sigmoid(z)*(1-sigmoid(z))